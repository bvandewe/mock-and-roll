#!/usr/bin/env bash

# Configuration and Server Management Help
# Shows how to use the new flexible configuration system

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${CYAN}üîß Mock Server Configuration Management${NC}"
echo -e "${BLUE}======================================${NC}"
echo ""

echo -e "${GREEN}üìÅ Configuration Structure:${NC}"
echo "   configs/"
echo "   ‚îú‚îÄ‚îÄ basic/          # Basic mock server setup"
echo "   ‚îú‚îÄ‚îÄ persistence/    # Redis-enabled configuration"  
echo "   ‚îî‚îÄ‚îÄ vmanage/        # vManage SD-WAN API mock"
echo ""
echo "   Each config directory contains:"
echo "   ‚îú‚îÄ‚îÄ api.json        # API metadata and settings"
echo "   ‚îú‚îÄ‚îÄ auth.json       # Authentication configuration"
echo "   ‚îî‚îÄ‚îÄ endpoints.json  # Route definitions"
echo ""

echo -e "${GREEN}üöÄ Starting Servers:${NC}"
echo ""
echo -e "${YELLOW}Generic Server Script (Recommended):${NC}"
echo "   ./scripts/start_server.sh                    # Interactive selection"
echo "   ./scripts/start_server.sh vmanage            # Start vmanage config"
echo "   ./scripts/start_server.sh basic              # Start basic config"
echo "   ./scripts/start_server.sh persistence        # Start persistence config"
echo "   ./scripts/start_server.sh --port 8002        # Custom port"
echo "   ./scripts/start_server.sh vmanage --host 127.0.0.1"
echo ""
echo -e "${YELLOW}Legacy Scripts (Still Available):${NC}"
echo "   ./scripts/start_vmanage_api.sh               # vManage-specific launcher"
echo "   ./scripts/start_vmanage_api_legacy.sh        # Wrapper to new script"
echo ""

echo -e "${GREEN}üõë Stopping Servers:${NC}"
echo ""
echo -e "${YELLOW}Generic Stop Script (Recommended):${NC}"
echo "   ./scripts/stop_server.sh                     # Auto-detect or interactive"
echo "   ./scripts/stop_server.sh vmanage             # Stop vmanage config"
echo "   ./scripts/stop_server.sh --port 8001         # Stop by port"
echo "   ./scripts/stop_server.sh --pid 12345         # Stop by process ID"
echo "   ./scripts/stop_server.sh --all               # Stop all mock servers"
echo ""
echo -e "${YELLOW}Legacy Scripts:${NC}"
echo "   ./scripts/stop_vmanage_api.sh                # vManage-specific stopper"
echo ""

echo -e "${GREEN}üìä Server Management:${NC}"
echo ""
echo -e "${YELLOW}Log Analysis:${NC}"
echo "   ./scripts/get_logs.sh                        # Get recent logs"
echo "   ./scripts/get_logs.sh 100                    # Get last 100 lines"
echo "   ./scripts/get_logs.sh 50 /login              # Filter by endpoint"
echo ""
echo -e "${YELLOW}Success Reporting:${NC}"
echo "   ./scripts/success_report.sh                  # Success summary"
echo "   ./scripts/success_report.sh detailed         # Detailed report"
echo "   ./scripts/success_report.sh json             # JSON output"
echo ""
echo -e "${YELLOW}Server Status:${NC}"
echo "   ./scripts/list_servers.sh                    # List running servers"
echo ""

echo -e "${GREEN}üîß Configuration Customization:${NC}"
echo ""
echo -e "${YELLOW}Creating New Configs:${NC}"
echo "   1. Copy existing config directory:"
echo "      cp -r configs/basic configs/my-config"
echo ""
echo "   2. Edit configuration files:"
echo "      - api.json: API metadata, persistence settings"
echo "      - auth.json: Authentication rules and tokens"
echo "      - endpoints.json: Route definitions and responses"
echo ""
echo "   3. Start with new config:"
echo "      ./scripts/start_server.sh my-config"
echo ""

echo -e "${GREEN}üìã Configuration Options:${NC}"
echo ""
echo -e "${YELLOW}api.json Settings:${NC}"
echo "   - api_name: Display name for the API"
echo "   - persistence: 'none', 'memory', or 'redis'"
echo "   - base_url: Base URL for documentation"
echo "   - root_path: API path prefix"
echo ""
echo -e "${YELLOW}auth.json Settings:${NC}"
echo "   - auth_enabled: true/false"
echo "   - auth_type: 'basic', 'bearer', 'api_key'"
echo "   - session_timeout: Session duration"
echo "   - users: User credentials array"
echo ""
echo -e "${YELLOW}endpoints.json Structure:${NC}"
echo "   - endpoints: Array of route definitions"
echo "   - Each endpoint has: path, method, response, auth"
echo "   - Supports templating and dynamic responses"
echo ""

echo -e "${GREEN}üîç Troubleshooting:${NC}"
echo ""
echo -e "${YELLOW}Common Issues:${NC}"
echo "   ‚Ä¢ Port already in use:"
echo "     ./scripts/stop_server.sh --port 8001"
echo ""
echo "   ‚Ä¢ Configuration not found:"
echo "     ls configs/  # Check available configs"
echo ""
echo "   ‚Ä¢ Server not responding:"
echo "     ./scripts/get_logs.sh | tail -20  # Check recent logs"
echo ""
echo -e "${YELLOW}Debug Commands:${NC}"
echo "   ps aux | grep uvicorn                        # Find running servers"
echo "   lsof -ti:8001                                # Check port usage"
echo "   curl http://localhost:8001/health            # Test server health"
echo ""

echo -e "${GREEN}üí° Examples:${NC}"
echo ""
echo -e "${YELLOW}Quick Start Workflow:${NC}"
echo "   1. ./scripts/start_server.sh                 # Interactive start"
echo "   2. curl http://localhost:8001/docs           # View API docs"
echo "   3. ./scripts/get_logs.sh                     # Monitor activity"
echo "   4. ./scripts/stop_server.sh                  # Clean shutdown"
echo ""
echo -e "${YELLOW}Development Workflow:${NC}"
echo "   1. ./scripts/start_server.sh persistence     # Start with Redis"
echo "   2. # Make API calls and test"
echo "   3. ./scripts/success_report.sh detailed      # Analyze results"
echo "   4. ./scripts/stop_server.sh persistence      # Stop by config"
echo ""

echo -e "${BLUE}üìñ For more information, see README.md${NC}"
echo ""
